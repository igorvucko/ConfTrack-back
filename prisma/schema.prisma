generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int              @id @default(autoincrement())
  email                    String           @unique
  password                 String
  name                     String?
  isEmailVerified          Boolean          @default(false)
  emailVerificationToken   String?          @unique
  emailVerificationExpires DateTime?
  reviews                  Review[]
  reviewLikes              ReviewLike[]
  reviewComments           ReviewComment[]
  posts                    Post[]
  postLikes                PostLike[]
  postComments             PostComment[]
  createdAt                DateTime         @default(now())
}

model Conference {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  location    String
  startDate   DateTime
  endDate     DateTime
  website     String?
  tags        String[]
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          Int           @id @default(autoincrement())
  title       String
  content     String
  author      User          @relation(fields: [authorId], references: [id])
  authorId    Int
  likes       PostLike[]
  comments    PostComment[]
  tags        String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Separate like model for reviews
model ReviewLike {
  id       Int     @id @default(autoincrement())
  review   Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  createdAt DateTime @default(now())

  @@unique([reviewId, userId])
}

// Separate like model for posts
model PostLike {
  id       Int     @id @default(autoincrement())
  post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

// Separate comment model for reviews
model ReviewComment {
  id        Int      @id @default(autoincrement())
  content   String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  createdAt DateTime @default(now())
}

// Separate comment model for posts
model PostComment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  createdAt DateTime @default(now())
}

model Review {
  id           Int             @id @default(autoincrement())
  rating       Int
  content      String
  conference   Conference      @relation(fields: [conferenceId], references: [id], onDelete: Cascade)
  conferenceId Int
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  comments     ReviewComment[]
  likes        ReviewLike[]
  createdAt    DateTime        @default(now())
}